module1
{   CDN : Content delivery Network{
        cdn is that where react library has been hosted
        fetching react and puting into our code
    } 
    in index.html{
        1. core react = Functionality for developmemt
        2. DOM DOCUMENT OBJECT MODEL 
        why use two diff liberary bcz react have react 3d,eract dom,react native for different pupose separte it
    }
    react is liberary which i work on smale portion on of page, rest page should be same
}
module2{
    bundler{
        vite,webpack,parser 
        why we need to use bundler : in proudction server we nedd to bundle of js,css
    }
    dev dependancy vs dependancy{
        npm i -D parcel = dev dependancy
        devDependancy = to develop react app
        dependancy = which also work on production server
    }
    package vs package-lock{
        package.json that have caret and tlide
        package-lock.json : always tract to the exact version which define in package.json
        node_modules: contains dB of configure dependancy
        ^ caret = minor dependancy
        ~ tlide = major dependancy
        transitive dependancy = {
            a parcel dependancy having own dependancy that own having some dependancy is called transitive dependancy
        }
    }
    npx{
        npx parcel index.html(source code)
        parcel goes to index.html which build developmemt a build and host it on localhost
        npx parcel build index.html
        configure this syntax into package.json file
    }
    
}
module3{
    JSX : with jsx developer life going to easy to do cool things also knows JAVASCRIPT SYNTAX
    react and jsx different things
    jsx is convension of merge js+html
    JSX is not HTML in JS but it XML-like HTML
    our code transpiled before reaches into js engine
    > functional component is simple js functional which return jsx element
    >component composotion is nothing but a component having another component
}
module4{
    >passing props to component same as passing argument to function
    >config tribute ui means all the UI driven by config
    >id not defined to restaurant card when changes in card it doesn't know where to changes so its clear container and add all things again 
}
module5{
    >why react : it makes developer lifes easy to making less code for more web pages which is major job react ui 
    provides large production scalable performance ready ui,optimise UI
    > HOOK is normal JAVASCRIPT function
    >> wherever state variable update readct re render the component
    react{
        > react fast due to fast dom manipulation (react has efficient dom manipulation)
        RECONCILIATION Algoritham (REACT FIBER : after version 16 it called as react fiber)
        {
            7 restaurant => 3 restaurant
            VIRTUAL DOM is representation of actual dom (basically object or javascript representation)
            ACTUAL DOM =<div><div></div></div>

            find out two html code different hard rather than object. (object compare is easy)
            react don't touch the html code 

            > basically virtual dom is nothing but a an object after clickng it goes 7 to 3 due some differnce between object it update the UI state.
            > react can efficiently find out  difference between virtual box and update UI
            > why fast : have virtual dom, dom manipulation, diff algoritham
        }
    }
}
module6{
    monolith/micro services architecture{
        -backend,ui,auth,db,sms sending,email notification services
        -all services combine into app SEPRATION OF CONCERNS or SINGLE RESPONSIBILE PRINCIPLE
        -this services are written on there languages and used different port and mapped into 
    }
    fetch api {
        1. load page->api fetch response->render
        2. load page->render->api fetch response->re-render (better approach)
    }
    useEffect {
        initial render => useEffect called after rendering component
    }
    cross origin => our browser block api from one origin to another origin (mismatch origin)
    conditional rendering : It render based on conditional based
    whenever state variable updates react trigger reconciliation cycle (re-render the component) 
}
module7{
    
}