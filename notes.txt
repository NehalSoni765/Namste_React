module1
{   CDN : Content delivery Network{
        cdn is that where react library has been hosted
        fetching react and puting into our code
    } 
    in index.html{
        1. core react = Functionality for developmemt
        2. DOM DOCUMENT OBJECT MODEL 
        why use two diff library bcz react have react 3d,eract dom,react native for different pupose separte it
    }
    root.render (heading) : render job it takes object convert into tag and put into dom
    react.createElement has tag,attribute,string/reactElement
    react is library which i work on smale portion on of page, rest page should be same
}
module2{
    bundler{
        vite,webpack,parser 
        why we need to use bundler : in proudction server we nedd to bundle of js,css
    }
    dev dependancy vs dependancy{
        npm i -D parcel = dev dependancy
        devDependancy = to develop react app
        dependancy = which also work on production server
    }
    package vs package-lock{
        package.json that have caret and tlide
        package-lock.json : always tract to the exact version which define in package.json
        node_modules: contains dB of configure dependancy
        ^ caret = minor dependancy
        ~ tlide = major dependancy
        transitive dependancy = {
            a parcel dependancy having own dependancy that own having some dependancy is called transitive dependancy
        }
    }
    npx{
        npx parcel index.html(source code)
        normal js doesn't have import export so we use type="module"
        parcel goes to index.html which build developmemt a build and host it on localhost
        remove main line from package.json cuz conflicting index.html app.js in start point
        npx parcel build index.html
        configure this syntax into package.json file
    }
}
module3{
    JSX : with jsx developer life going to easy to do cool things also knows JAVASCRIPT SYNTAX
    react and jsx different things
    jsx is convension of merge js+html
    JSX is not HTML in JS but it is XML-like or HTML-like syntax.
    our code transpiled before reaches into js engine
    babel responsible to convert jsx to react element
    wrap multiline code into () bracket
    element/component : component has function with capital First 
    > functional component is simple js functional which return jsx element
    > component composotion is nothing but a component having another component
}
module4{
    >passing props to component same as passing argument to function
    >config tribute ui means all the UI driven by config
    >id not defined to restaurant card when changes in card it doesn't know where to changes so its clear container and add all things again 
}
module5{
    >why react : it makes developer lifes easy to making less code for more web pages which is major job react ui 
    provides large production scalable performance ready ui,optimise UI
    > export {default,name}
    > HOOK is normal JAVASCRIPT function
    >> wherever state variable update readct re render the component
    react{
        > react fast due to fast dom manipulation (react has efficient dom manipulation)
        RECONCILIATION Algoritham (REACT FIBER : after version 16 it called as react fiber)
        {
            7 restaurant => 3 restaurant
            VIRTUAL DOM is representation of actual dom (basically object or javascript representation)
            ACTUAL DOM =<div><div></div></div>

            find out two html code different hard rather than object. (object compare is easy)
            react don't touch the html code 

            > basically virtual dom is nothing but a an object after clickng it goes 7 to 3 due some differnce between object it update the UI state.
            > react can efficiently find out  difference between virtual box and update UI
            > why fast : have virtual dom, dom manipulation, diff algoritham
        }
    }
}
module6{
    monolith/micro services architecture{
        -backend,ui,auth,db,sms sending,email notification services which comes and form microservices
        -all services combine into app SEPRATION OF CONCERNS or SINGLE RESPONSIBILE PRINCIPLE
        -this services are written on there languages and used different port and mapped into 
    }
    fetch api {
        1. load page->api fetch response->render
        2. load page->render(dummy content/shimmer)->api fetch response->re-render (better approach)
    }
    useEffect {
        load page => initial render => useEffect called after rendering component
    }
    cross origin => our browser block api from one origin to another origin (mismatch origin)
    shimmer
    conditional rendering : It render based on conditional based
    whenever state variable updates react trigger reconciliation cycle (re-render the component) 
    https://corsproxy.io/?swiggy_api for different user want to access your site
}
module7{
    useeffect{
        > If no dependancy array => useEffect call on every render component
        > If empty dependancy array => useEffect called on initial render(just render after component)
        > If dependancy array have some varible => useEffect call every time dependancy updated
        >> react is single page applicationn because it not reload the site
        
        - Client side Routing (at initial render store component by triggering link just replacing the component/you redirect anither page just coponent changes)
        - Server side Routing (you made a call and about us page comes with data to server)

        dynamic routing : each card has menu
        link overwrap to anchor
    }
}
module8{
    function vs class{
        > function component end of js function 
        > class component end of js class {
            - it inherit from react component
            - it has render method which return jsx
        }
        > state variable can not directly update in class(this.setState) as well as function(setCount) 
        calling a functions/loading = mounting component
        > loading a class bassed component means creating instance of class.
        lifecycle{
            > render means mount
            In aboutUs: Component did mount{
                > reanct render the step by step mounting when time to load class component 
                    first a constructor the render called
                    - Parent constructor
                    - Parent render
                    - Child constructor
                    - Child render
                > why use: to make an api call
                > empty array dependancy of use effect
            }
            > update dom manipulation is very expensive that why it 
            > react fast because it has two faces render(constructor,render,update dom) and commit(componentDidMount)
            look on userclass component
            {
                react mounting lifecycle {
                    * ----mounting -----
                    * constructor(dummy)
                    * render(dummy)
                    * componentDidMount() (API call exceed)
                    *  this.setState(State Variable)
                    * ------- updating
                    *  this.setState(Update State Variable)
                    *  render component (DOM manipulation new data)
                    *  componentDidUpdate()
                }
                react unmounting lifecycle{
                    - it calls when we go from about us to contact us 
                    - why they use array in useeffect because earlier class component have to check multiple conditions on same function of componentDidUpdate
                }
            }
            class : loading => con,render => dom manipulation => componentDidMount => re-render 
            function : loading => render => componentDidMount => re-render
            componentDidMount similar to useEffect
        }
    }
}
module9{
    > modularity = breakdown code into small small modules/component for reusable,maintainable,test
    > chunkling,code splitting,dynamic bundling,lazy loading,on demand loading are are ones why{
        in large scale web application we can not load based on one file we seprate flight js,hotel js,vus js extc 
    }
    using lazy loading - component render index.js and when click on grocery on header=>{
        grocery fetch data from code so in mid time cause an error to solve this react provide suspense function during mid time show your component
    }
}
module10{
    > sass vs scss sass has power to write a css
    > postcss means it convert css with javascript
    > init is initiallize the component
}
module11{
    > Higher order component is component which takes the component and return the component
    > parent component control child(erstaturantmenu) is called control component
    > lifting state up
    > props drilling (pass props from top to subchild) to solve use contextAPI{
        > create context in util>usercontext
        > get usercontext in about us,header
        > set usercontext(provide context) app.js
    }
    differnce between context and redux {
        > context can be provide by react 
        > redux we have to store external library
        > redux can be used for large scale application 
    }
}
module12{
    > zustland -state management (new tool)
    > redux{
        - state management and offer to easy debug
        - redux offer two library is react-redux redux-toolkit
        >> redux toolkit is standard way to write redux logic
        >> redux toolkit {
            - is object which store a different slices like userInfo,cardInfo
            - we can not modify direct to redux slice
            >> click on add button -> it dispatch action -> (that action call reducer function) which calls a reducer (function) -> which internally modify the cart slice  
            - read data from slice to cart header
            >> use selector which gives redux slice (this cart component subscribe the store [subscribing store - selector] )
        }
        //more eficieint
        const cartItems = useSelector((store) => store.cart.items);
        
        //less eficieint bcs it update all store instead of one
        const store = useSelector((store) => store);
        const cartItems = store.cart.items;

        in vanila version => don't mutate the state
        redux toolkit => we have to mutate the state (but in depth it still mutate state => redux toolkit uses immer(take state=>create state=>return latest state))  

    }
}
module13 : Testing{
    [npm i -D @testing-library/react]
    - Unit Testing {
        - Testing component in isolation app (looking for particular section or componetn)
    }
    - Integrating Testing{
        - multiple component interact to other component (component talking to each other and develop the flow like (swiggy search))
    }
    - End to End Testing - e2e testing (user flow throughout the application)
    -JEST{
        - javascript testing framwork (jest site)
        >> when working with babel need to additional add library [npm install --save-dev babel-jest @babel/core @babel/preset-env]
        - why we add babel config {
            - adding config file conflict between parcel(Parcel includes transpilation by default) and babel unsure to choose so that we diable current parcel system
            >> actual happens that parcel disbale own transpilation and to use external babel we configure it.
        }
    }
    process{
        - install testing react library
        - install jest,babel dependancy from jest site
        - configure babel configure file
        - configure parcelrc for disable javascript
        - jest configure {
            - npx jest --init{
                no
                2 jsdom (jsdom is like to dom but not dom)(component run into jsdom)
                yes
                babel
                yes
            }
        }
        - install jsdom : npx i --save-dev jest-environment-jsdom.{> __ means dunder}
        - install @babel/preset-babel : to make JSX work in test cases.
        - include @babel/preset-babel inside babel config file.
        - include @testing-library/jest-dom .
    }
    foundation {
        - description{
            - render
            - querying
            - assertion
            > you may use test/it 
        }
    }
}
module14: netflixGPT {
    - why we choose create-react-app : behind this scene it uses webpack is also bundler,same job like parcel. a lot of stackhold that's why developer use
    - github link : "https://github.com/NehalSoni765/netflix-gpt"
}